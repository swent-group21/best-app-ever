import { useState, useEffect } from "react";
import {
  requestForegroundPermissionsAsync,
  getCurrentPositionAsync,
  LocationObject,
} from "expo-location";
import { createChallenge } from "@/types/ChallengeBuilder";
import FirestoreCtrl, { DBGroup } from "@/src/models/firebase/FirestoreCtrl";

/**
 * View model for the create challenge screen.
 * @param firestoreCtrl : FirestoreCtrl object
 * @param navigation : navigation object
 * @param route : route object
 * @returns : challengeName, setChallengeName, description, setDescription, location, isLocationEnabled, toggleLocation, and makeChallenge
 */
export default function CreateChallengeViewModel({
  firestoreCtrl,
  navigation,
  route,
}: {
  firestoreCtrl: FirestoreCtrl;
  navigation: any;
  route: any;
}) {
  const [challengeName, setChallengeName] = useState("");
  const [description, setDescription] = useState("");
  const [location, setLocation] = useState<LocationObject | null>(null);
  const [isLocationEnabled, setIsLocationEnabled] = useState(true);

  const imageId = route.params?.image_id;
  const group_id = route.params?.group_id;
  const isInHome = group_id == undefined;
  console.info("group_id in create :", group_id);

  // Toggle location switch
  const toggleLocation = () => setIsLocationEnabled((prev) => !prev);

  // Fetch the current location
  useEffect(() => {
    async function fetchLocation() {
      let { status } = await requestForegroundPermissionsAsync();
      if (status !== "granted") {
        setIsLocationEnabled(false);
        return;
      }
      let currentLocation = await getCurrentPositionAsync();
      setLocation(currentLocation);
    }
    fetchLocation();
  }, []);

  // Create the challenge
  const makeChallenge = async () => {
    try {
      // Check if location is enabled when creating a challenge in a group
      if (group_id != "" && group_id != "home") {
        if (!isLocationEnabled || location == null) {
          alert("You need to enable location to create a challenge in a group");
          navigation.navigate("GroupScreen", { currentGroup: group_id });
          return;
        }

        // Check if the location is within the group's area
        const group: DBGroup = await firestoreCtrl.getGroup(group_id);
        if (!isInGroupArea(location, group)) {
          alert("You need to be in the group's area to create a challenge");
          navigation.navigate("GroupScreen", { currentGroup: group });
          return;
        }
      }

      // Create the challenge
      await createChallenge(
        firestoreCtrl,
        challengeName,
        description,
        isLocationEnabled ? location : null,
        group_id,
        new Date(),
        imageId,
      );

      // Navigate to the group screen if the challenge is created in a group
      if (group_id == "" || group_id == "home") {
        navigation.navigate("Home");
      } else {
        const group: DBGroup = await firestoreCtrl.getGroup(group_id);
        console.log("group in create challenge: ", group);
        navigation.navigate("GroupScreen", { currentGroup: group });
      }
    } catch (error) {
      console.error("Unable to create challenge", error);
      return error;
    }
  };

  return {
    challengeName,
    setChallengeName,
    description,
    setDescription,
    location,
    isLocationEnabled,
    toggleLocation,
    makeChallenge,
    isInHome,
  };
}

/**
 * This function checks if a location is within a group's area.
 *
 * @param location the location object
 * @param group the group object
 * @returns true if the location is within the group's area, false otherwise
 */
function isInGroupArea(location: LocationObject, group: DBGroup) {
  const distance = getDistance(
    location.coords.latitude,
    location.coords.longitude,
    group.location.latitude,
    group.location.longitude,
  );
  console.log("distance: ", distance);
  return distance <= group.radius;
}
/**
 * This function calculates the distance between two points on the earth's surface, given their latitude and longitude.
 * This function was generated by Copilot.
 *
 * @param lat1 the latitude of the first point
 * @param lon1 the longitude of the first point
 * @param lat2 the latitude of the second point
 * @param lon2 the longitude of the second point
 * @returns the distance between the two points in meters
 */
function getDistance(lat1: number, lon1: number, lat2: number, lon2: number) {
  const R = 6371000; // Radius of the earth in m
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(deg2rad(lat1)) *
      Math.cos(deg2rad(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c; // Distance in m
  return distance;
}

/**
 * This function converts a degree value to a radian value.
 *
 * @param deg the degree value
 * @returns
 */
function deg2rad(deg: number) {
  return deg * (Math.PI / 180);
}
